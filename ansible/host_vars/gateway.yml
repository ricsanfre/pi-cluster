---
# gateway node variables

########################
# dnsmasq role variables
########################
dnsmasq_interface: 'eth0'
dnsmasq_listen_address: '10.0.0.1'
dnsmasq_domain_name: "{{ dns_domain }}"
dnsmasq_upstream_dns_servers:
  - 80.58.61.250
  - 80.58.61.254
dnsmasq_dhcp_range: '10.0.0.32,10.0.0.99'
dnsmasq_additional_dhcp_hosts:
  ethernet_switch:
    desc: "Ethernet Switch"
    mac: 94:a6:7e:7c:c7:69
    ip: 10.0.0.2
dnsmasq_additional_dns_hosts:
  ntp_server:
    desc: "NTP Server"
    hostname: ntp
    ip: 10.0.0.1
  dns_server:
    desc: "DNS Server"
    hostname: dns
    ip: 10.0.0.1
  s3_server:
    desc: "S3 Server"
    hostname: s3
    ip: 10.0.0.11
  elasticsearch:
    desc: "Elasticsearch server"
    hostname: elasticsearch
    ip: 10.0.0.100
  grafana:
    desc: "Monitor server"
    hostname: monitoring
    ip: 10.0.0.100
  fluentd:
    desc: "Fluentd server"
    hostname: fluentd
    ip: 10.0.0.101
  vault_server:
    desc: "Vault server"
    hostname: vault
    ip: 10.0.0.1

####################
# ntp role variables
####################
ntp_allow_hosts: [10.0.0.0/24]

#########################
# firewall role variables
#########################

# tcp 9100 Prometheus (fluent-bit)
in_tcp_port: '{ ssh, https, http, iscsi-target, 9100 }'
in_udp_port: '{ snmp, domain, ntp, bootps }'
# tcp 9091 minio server
# tcp 8200, 8201 Vault server
forward_tcp_port: '{ http, https, ssh, 9091, 8200, 8201 }'
forward_udp_port: '{ domain, ntp }'
# Enabling forwarding and NAT
firewall_forward_enabled: true
firewall_nat_enabled: true
# Definitions
nft_define_host:
  lan interface:
    name: lan_interface
    value: 'eth0'
  wan interface:
    name: wan_interface
    value: 'wlan0'
  lan network:
    name: lan_network
    value: '10.0.0.0/24'
  forward tcp accepted:
    name: forward_tcp_accept
    value: '{{ forward_tcp_port }}'
  forward udp accepted:
    name: forward_udp_accept
    value: '{{ forward_udp_port }}'
# Forward Definitions
nft_set_host:
  forward_tcp_accept:
    - type inet_service; flags interval;
    - elements = $forward_tcp_accept
  forward_udp_accept:
    - type inet_service; flags interval;
    - elements = $forward_udp_accept
# Input rules
# override default rules allowing incoming broadcast traffic (DHCP)
nft_input_host_rules:
  010 drop unwanted: []
  011 drop unwanted ipv6: []

# Output rules
# override default rules allowing all out traffic
nft_output_host_rules:
  000 policy:
    - type filter hook output priority 0;
  005 global: []
  015 localhost: []
  050 icmp: []
  200 output udp accepted: []
  210 output tcp accepted: []
  250 reset-ssh: []
# Forwarding rules
nft_forward_host_rules:
  200 lan to wan tcp:
    - iifname $lan_interface ip saddr $lan_network oifname $wan_interface tcp dport @forward_tcp_accept ct state new accept
  210 wan to lan udp:
    - iifname $lan_interface ip saddr $lan_network oifname $wan_interface udp dport @forward_udp_accept ct state new accept
  220 ssh from wan:
    - iifname $wan_interface oifname $lan_interface ip daddr $lan_network tcp dport ssh ct state new accept
  230 http from wan:
    - iifname $wan_interface oifname $lan_interface ip daddr $lan_network tcp dport {http, https} ct state new accept
  240 kube-api from wan:
    - iifname $wan_interface oifname $lan_interface ip daddr 10.0.0.11 tcp dport 6443 ct state new accept
  250 port-forwarding from wan:
    - iifname $wan_interface oifname $lan_interface ip daddr 10.0.0.11 tcp dport 8080 ct state new accept
# NAT Post-routing
nft_nat_host_postrouting_rules:
  005 masquerade lan to wan:
    - ip saddr $lan_network oifname $wan_interface masquerade

############################
# restic backup role variables
############################
restic_clean_service: true
